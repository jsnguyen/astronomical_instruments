import importlib.resources
import numpy as np
from numpy.polynomial import Polynomial

class NIRC2:
    def apply_nonlinearity_correction(data, year, correction_filename=None):
        '''
        apply the non-linearity correction

        args:
            data: the image we want to linearize
            year: the year of data we want to use, 2019 for before the NIRC2 upgrade, 2024 for after the NIRC2 upgrade
            correction_filename: can specify a new correction curve file. must be a *.npy file generated by this script!

        return:
            the corrected, linearized data
        '''

        if correction_filename is None:

            valid_years = ['2019', '2024']
            if year not in valid_years:
                print(f'Year must be in {valid_years}!')
                return

            data_file = importlib.resources.files(f'nirc2_nonlinearity_correction.data_{year}').joinpath(f'correction_curve_{year}.npy')
            coef = np.load(data_file, allow_pickle=True)
        else:
            coef = np.load(correction_filename, allow_pickle=True)

        correction_curve = Polynomial(coef)

        # want to apply the negative of this data to "push" the points up to meet the expected linearity
        correction_function = 1-correction_curve 

        # get the "percent correction" ie: the percentage to multiply by to correct for linearity
        percent_correction = correction_function(data)

        # apply final correction to get final data
        corrected_data = percent_correction*data

        return corrected_data